
SAMD21_SD_Boot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000704  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000004  20000000  00000704  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000058  20000004  00000708  00020004  2**2
                  ALLOC
  3 .stack        00002004  2000005c  00000760  00020004  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
  6 .debug_info   00012acf  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000018f6  00000000  00000000  00032b54  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00001f50  00000000  00000000  0003444a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000002c8  00000000  00000000  0003639a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000240  00000000  00000000  00036662  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00003d61  00000000  00000000  000368a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00007576  00000000  00000000  0003a603  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008750f  00000000  00000000  00041b79  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000654  00000000  00000000  000c9088  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
 * \note This will not change setting in user's configuration structure.
 *
 * \param[in, out] module  Pointer to the software instance struct
 */
void rtc_calendar_swap_time_mode(struct rtc_module *const module)
{
   0:	20002060 	.word	0x20002060
   4:	0000056d 	.word	0x0000056d
	/* Initialize time structure. */
	struct rtc_calendar_time time;
	struct rtc_calendar_alarm_time alarm;

	/* Get current time. */
	rtc_calendar_get_time(module, &time);
   8:	00000569 	.word	0x00000569
   c:	00000569 	.word	0x00000569
	...
		/* Set pm flag. */
		time.pm = (uint8_t)(time.hour / 12);

		/* Set 12h clock hour value. */
		time.hour = time.hour % 12;
		if (time.hour == 0) {
  2c:	00000569 	.word	0x00000569
	...
			time.hour = 12;
  38:	00000569 	.word	0x00000569
		}

		/* Update alarms */
		for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
			rtc_calendar_get_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
  3c:	00000569 	.word	0x00000569
  40:	00000569 	.word	0x00000569
  44:	00000569 	.word	0x00000569
			alarm.time.pm = (uint8_t)(alarm.time.hour / 12);
  48:	00000569 	.word	0x00000569
  4c:	00000115 	.word	0x00000115
  50:	00000569 	.word	0x00000569
			alarm.time.hour = alarm.time.hour % 12;
  54:	00000569 	.word	0x00000569
  58:	00000569 	.word	0x00000569
			if (alarm.time.hour == 0) {
  5c:	00000569 	.word	0x00000569

		/* Update alarms */
		for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
			rtc_calendar_get_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
			alarm.time.pm = (uint8_t)(alarm.time.hour / 12);
			alarm.time.hour = alarm.time.hour % 12;
  60:	00000569 	.word	0x00000569
			if (alarm.time.hour == 0) {
				alarm.time.hour = 12;
  64:	00000151 	.word	0x00000151
  68:	00000161 	.word	0x00000161
			}
			module->clock_24h = false;
  6c:	00000171 	.word	0x00000171
			rtc_calendar_set_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
  70:	00000181 	.word	0x00000181
  74:	00000191 	.word	0x00000191
			module->clock_24h = true;
		}

		/* Change value in configuration structure. */
		module->clock_24h = false;
  78:	000001a1 	.word	0x000001a1
	} else {
		/* Set hour value based on pm flag. */
		if (time.pm == 1) {
  7c:	00000569 	.word	0x00000569
  80:	00000569 	.word	0x00000569
			time.hour = time.hour + 12;
  84:	00000569 	.word	0x00000569
  88:	00000569 	.word	0x00000569

			time.pm = 0;
  8c:	00000569 	.word	0x00000569
			time.hour = 0;
		}

		/* Update alarms */
		for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
			rtc_calendar_get_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
  90:	00000569 	.word	0x00000569
	...
			if (alarm.time.pm == 1) {
  9c:	00000569 	.word	0x00000569
  a0:	00000569 	.word	0x00000569
		/* Set hour value based on pm flag. */
		if (time.pm == 1) {
			time.hour = time.hour + 12;

			time.pm = 0;
		} else if (time.hour == 12) {
  a4:	00000569 	.word	0x00000569
  a8:	00000569 	.word	0x00000569
			time.hour = 0;
  ac:	00000569 	.word	0x00000569
  b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:

		/* Update alarms */
		for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
			rtc_calendar_get_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
			if (alarm.time.pm == 1) {
				alarm.time.hour = alarm.time.hour + 12;
  b4:	b510      	push	{r4, lr}
  b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
  b8:	7823      	ldrb	r3, [r4, #0]
  ba:	2b00      	cmp	r3, #0
				alarm.time.pm = 0;
  bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
  be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
				module->clock_24h = true;
  c0:	2b00      	cmp	r3, #0
  c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
				rtc_calendar_set_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
  c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
  c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
  c8:	bf00      	nop
  ca:	2301      	movs	r3, #1
  cc:	7023      	strb	r3, [r4, #0]
				module->clock_24h = false;
			} else if (alarm.time.hour == 12) {
  ce:	bd10      	pop	{r4, pc}
  d0:	20000004 	.word	0x20000004
  d4:	00000000 	.word	0x00000000
				alarm.time.hour = 0;
  d8:	00000704 	.word	0x00000704

000000dc <frame_dummy>:
			}
		}

		/* Change value in configuration structure. */
		module->clock_24h = true;
  dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
  de:	b510      	push	{r4, lr}
	}

	/* Disable RTC so new configuration can be set. */
	rtc_calendar_disable(module);
  e0:	2b00      	cmp	r3, #0
  e2:	d003      	beq.n	ec <frame_dummy+0x10>
  e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)

	/* Toggle mode. */
	rtc_module->MODE2.CTRL.reg ^= RTC_MODE2_CTRL_CLKREP;
  e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
  e8:	e000      	b.n	ec <frame_dummy+0x10>
  ea:	bf00      	nop
  ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)

	/* Enable RTC. */
	rtc_calendar_enable(module);
  ee:	6803      	ldr	r3, [r0, #0]
  f0:	2b00      	cmp	r3, #0
  f2:	d100      	bne.n	f6 <frame_dummy+0x1a>

	/* Set new time format in CLOCK register. */
	rtc_calendar_set_time(module, &time);
  f4:	bd10      	pop	{r4, pc}
  f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
  f8:	2b00      	cmp	r3, #0
  fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
}
  fc:	4798      	blx	r3
  fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
 100:	00000000 	.word	0x00000000
 104:	20000008 	.word	0x20000008
 108:	00000704 	.word	0x00000704
 10c:	00000704 	.word	0x00000704
 110:	00000000 	.word	0x00000000

00000114 <RTC_Handler>:
 114:	b510      	push	{r4, lr}
 116:	4b0d      	ldr	r3, [pc, #52]	; (14c <RTC_Handler+0x38>)
 118:	681a      	ldr	r2, [r3, #0]
 11a:	6814      	ldr	r4, [r2, #0]
	struct rtc_module *module = _rtc_instance[instance_index];

	Rtc *const rtc_module = module->hw;

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
 11c:	8a53      	ldrh	r3, [r2, #18]
	callback_mask &= module->registered_callback;
 11e:	8a11      	ldrh	r1, [r2, #16]
 120:	4019      	ands	r1, r3

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
 122:	7a23      	ldrb	r3, [r4, #8]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
 124:	79e0      	ldrb	r0, [r4, #7]
 126:	4003      	ands	r3, r0

	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
 128:	09d8      	lsrs	r0, r3, #7
 12a:	d006      	beq.n	13a <RTC_Handler+0x26>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
 12c:	078b      	lsls	r3, r1, #30
 12e:	d501      	bpl.n	134 <RTC_Handler+0x20>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
 130:	68d3      	ldr	r3, [r2, #12]
 132:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
 134:	2380      	movs	r3, #128	; 0x80
 136:	7223      	strb	r3, [r4, #8]
 138:	e007      	b.n	14a <RTC_Handler+0x36>

	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
 13a:	07db      	lsls	r3, r3, #31
 13c:	d505      	bpl.n	14a <RTC_Handler+0x36>
		/* Alarm 0 interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
 13e:	07cb      	lsls	r3, r1, #31
 140:	d501      	bpl.n	146 <RTC_Handler+0x32>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
 142:	6893      	ldr	r3, [r2, #8]
 144:	4798      	blx	r3
		}
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
 146:	2301      	movs	r3, #1
 148:	7223      	strb	r3, [r4, #8]
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
	_rtc_interrupt_handler(0);
}
 14a:	bd10      	pop	{r4, pc}
 14c:	20000058 	.word	0x20000058

00000150 <SERCOM0_Handler>:
	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
}

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
 150:	b510      	push	{r4, lr}
 152:	4b02      	ldr	r3, [pc, #8]	; (15c <SERCOM0_Handler+0xc>)
 154:	681b      	ldr	r3, [r3, #0]
 156:	2000      	movs	r0, #0
 158:	4798      	blx	r3
 15a:	bd10      	pop	{r4, pc}
 15c:	20000020 	.word	0x20000020

00000160 <SERCOM1_Handler>:
 160:	b510      	push	{r4, lr}
 162:	4b02      	ldr	r3, [pc, #8]	; (16c <SERCOM1_Handler+0xc>)
 164:	685b      	ldr	r3, [r3, #4]
 166:	2001      	movs	r0, #1
 168:	4798      	blx	r3
 16a:	bd10      	pop	{r4, pc}
 16c:	20000020 	.word	0x20000020

00000170 <SERCOM2_Handler>:
 170:	b510      	push	{r4, lr}
 172:	4b02      	ldr	r3, [pc, #8]	; (17c <SERCOM2_Handler+0xc>)
 174:	689b      	ldr	r3, [r3, #8]
 176:	2002      	movs	r0, #2
 178:	4798      	blx	r3
 17a:	bd10      	pop	{r4, pc}
 17c:	20000020 	.word	0x20000020

00000180 <SERCOM3_Handler>:
 180:	b510      	push	{r4, lr}
 182:	4b02      	ldr	r3, [pc, #8]	; (18c <SERCOM3_Handler+0xc>)
 184:	68db      	ldr	r3, [r3, #12]
 186:	2003      	movs	r0, #3
 188:	4798      	blx	r3
 18a:	bd10      	pop	{r4, pc}
 18c:	20000020 	.word	0x20000020

00000190 <SERCOM4_Handler>:
 190:	b510      	push	{r4, lr}
 192:	4b02      	ldr	r3, [pc, #8]	; (19c <SERCOM4_Handler+0xc>)
 194:	691b      	ldr	r3, [r3, #16]
 196:	2004      	movs	r0, #4
 198:	4798      	blx	r3
 19a:	bd10      	pop	{r4, pc}
 19c:	20000020 	.word	0x20000020

000001a0 <SERCOM5_Handler>:
 1a0:	b510      	push	{r4, lr}
 1a2:	4b02      	ldr	r3, [pc, #8]	; (1ac <SERCOM5_Handler+0xc>)
 1a4:	695b      	ldr	r3, [r3, #20]
 1a6:	2005      	movs	r0, #5
 1a8:	4798      	blx	r3
 1aa:	bd10      	pop	{r4, pc}
 1ac:	20000020 	.word	0x20000020

000001b0 <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
 1b0:	4770      	bx	lr
 1b2:	46c0      	nop			; (mov r8, r8)

000001b4 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
 1b4:	4b0c      	ldr	r3, [pc, #48]	; (1e8 <cpu_irq_enter_critical+0x34>)
 1b6:	681b      	ldr	r3, [r3, #0]
 1b8:	2b00      	cmp	r3, #0
 1ba:	d110      	bne.n	1de <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 1bc:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
 1c0:	2b00      	cmp	r3, #0
 1c2:	d109      	bne.n	1d8 <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 1c4:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
 1c6:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
 1ca:	2200      	movs	r2, #0
 1cc:	4b07      	ldr	r3, [pc, #28]	; (1ec <cpu_irq_enter_critical+0x38>)
 1ce:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
 1d0:	3201      	adds	r2, #1
 1d2:	4b07      	ldr	r3, [pc, #28]	; (1f0 <cpu_irq_enter_critical+0x3c>)
 1d4:	701a      	strb	r2, [r3, #0]
 1d6:	e002      	b.n	1de <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
 1d8:	2200      	movs	r2, #0
 1da:	4b05      	ldr	r3, [pc, #20]	; (1f0 <cpu_irq_enter_critical+0x3c>)
 1dc:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
 1de:	4a02      	ldr	r2, [pc, #8]	; (1e8 <cpu_irq_enter_critical+0x34>)
 1e0:	6813      	ldr	r3, [r2, #0]
 1e2:	3301      	adds	r3, #1
 1e4:	6013      	str	r3, [r2, #0]
}
 1e6:	4770      	bx	lr
 1e8:	20000038 	.word	0x20000038
 1ec:	20000000 	.word	0x20000000
 1f0:	2000003c 	.word	0x2000003c

000001f4 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
 1f4:	4b08      	ldr	r3, [pc, #32]	; (218 <cpu_irq_leave_critical+0x24>)
 1f6:	681a      	ldr	r2, [r3, #0]
 1f8:	3a01      	subs	r2, #1
 1fa:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
 1fc:	681b      	ldr	r3, [r3, #0]
 1fe:	2b00      	cmp	r3, #0
 200:	d109      	bne.n	216 <cpu_irq_leave_critical+0x22>
 202:	4b06      	ldr	r3, [pc, #24]	; (21c <cpu_irq_leave_critical+0x28>)
 204:	781b      	ldrb	r3, [r3, #0]
 206:	2b00      	cmp	r3, #0
 208:	d005      	beq.n	216 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
 20a:	2201      	movs	r2, #1
 20c:	4b04      	ldr	r3, [pc, #16]	; (220 <cpu_irq_leave_critical+0x2c>)
 20e:	701a      	strb	r2, [r3, #0]
 210:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 214:	b662      	cpsie	i
	}
}
 216:	4770      	bx	lr
 218:	20000038 	.word	0x20000038
 21c:	2000003c 	.word	0x2000003c
 220:	20000000 	.word	0x20000000

00000224 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
 224:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
 226:	4c0c      	ldr	r4, [pc, #48]	; (258 <system_clock_source_osc8m_set_config+0x34>)
 228:	6a23      	ldr	r3, [r4, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
 22a:	7801      	ldrb	r1, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
 22c:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
 22e:	7842      	ldrb	r2, [r0, #1]
 230:	2001      	movs	r0, #1
 232:	4002      	ands	r2, r0
 234:	0192      	lsls	r2, r2, #6
 236:	2640      	movs	r6, #64	; 0x40
 238:	43b3      	bics	r3, r6
 23a:	4313      	orrs	r3, r2
 23c:	0002      	movs	r2, r0
 23e:	402a      	ands	r2, r5
 240:	01d2      	lsls	r2, r2, #7
 242:	307f      	adds	r0, #127	; 0x7f
 244:	4383      	bics	r3, r0
 246:	4313      	orrs	r3, r2
 248:	2203      	movs	r2, #3
 24a:	400a      	ands	r2, r1
 24c:	0212      	lsls	r2, r2, #8
 24e:	4903      	ldr	r1, [pc, #12]	; (25c <system_clock_source_osc8m_set_config+0x38>)
 250:	400b      	ands	r3, r1
 252:	4313      	orrs	r3, r2
 254:	6223      	str	r3, [r4, #32]
}
 256:	bd70      	pop	{r4, r5, r6, pc}
 258:	40000800 	.word	0x40000800
 25c:	fffffcff 	.word	0xfffffcff

00000260 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
 260:	2808      	cmp	r0, #8
 262:	d803      	bhi.n	26c <system_clock_source_enable+0xc>
 264:	0080      	lsls	r0, r0, #2
 266:	4b25      	ldr	r3, [pc, #148]	; (2fc <system_clock_source_enable+0x9c>)
 268:	581b      	ldr	r3, [r3, r0]
 26a:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
 26c:	2017      	movs	r0, #23
 26e:	e044      	b.n	2fa <system_clock_source_enable+0x9a>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
 270:	4a23      	ldr	r2, [pc, #140]	; (300 <system_clock_source_enable+0xa0>)
 272:	6a11      	ldr	r1, [r2, #32]
 274:	2302      	movs	r3, #2
 276:	430b      	orrs	r3, r1
 278:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
 27a:	2000      	movs	r0, #0
 27c:	e03d      	b.n	2fa <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
 27e:	4a20      	ldr	r2, [pc, #128]	; (300 <system_clock_source_enable+0xa0>)
 280:	6991      	ldr	r1, [r2, #24]
 282:	2302      	movs	r3, #2
 284:	430b      	orrs	r3, r1
 286:	6193      	str	r3, [r2, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
 288:	2000      	movs	r0, #0
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;
 28a:	e036      	b.n	2fa <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
 28c:	4a1c      	ldr	r2, [pc, #112]	; (300 <system_clock_source_enable+0xa0>)
 28e:	8a11      	ldrh	r1, [r2, #16]
 290:	2302      	movs	r3, #2
 292:	430b      	orrs	r3, r1
 294:	8213      	strh	r3, [r2, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
 296:	2000      	movs	r0, #0
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;
 298:	e02f      	b.n	2fa <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
 29a:	4a19      	ldr	r2, [pc, #100]	; (300 <system_clock_source_enable+0xa0>)
 29c:	8a91      	ldrh	r1, [r2, #20]
 29e:	2302      	movs	r3, #2
 2a0:	430b      	orrs	r3, r1
 2a2:	8293      	strh	r3, [r2, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
 2a4:	2000      	movs	r0, #0
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;
 2a6:	e028      	b.n	2fa <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
 2a8:	4916      	ldr	r1, [pc, #88]	; (304 <system_clock_source_enable+0xa4>)
 2aa:	680b      	ldr	r3, [r1, #0]
 2ac:	2202      	movs	r2, #2
 2ae:	4313      	orrs	r3, r2
 2b0:	600b      	str	r3, [r1, #0]

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
 2b2:	4b13      	ldr	r3, [pc, #76]	; (300 <system_clock_source_enable+0xa0>)
 2b4:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
 2b6:	0019      	movs	r1, r3
 2b8:	320e      	adds	r2, #14
 2ba:	68cb      	ldr	r3, [r1, #12]
 2bc:	421a      	tst	r2, r3
 2be:	d0fc      	beq.n	2ba <system_clock_source_enable+0x5a>

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
	_system_dfll_wait_for_sync();

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
 2c0:	4a10      	ldr	r2, [pc, #64]	; (304 <system_clock_source_enable+0xa4>)
 2c2:	6891      	ldr	r1, [r2, #8]
 2c4:	4b0e      	ldr	r3, [pc, #56]	; (300 <system_clock_source_enable+0xa0>)
 2c6:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
 2c8:	6852      	ldr	r2, [r2, #4]
 2ca:	629a      	str	r2, [r3, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
 2cc:	2200      	movs	r2, #0
 2ce:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
 2d0:	0019      	movs	r1, r3
 2d2:	3210      	adds	r2, #16
 2d4:	68cb      	ldr	r3, [r1, #12]
 2d6:	421a      	tst	r2, r3
 2d8:	d0fc      	beq.n	2d4 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
	_system_dfll_wait_for_sync();
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
 2da:	4b0a      	ldr	r3, [pc, #40]	; (304 <system_clock_source_enable+0xa4>)
 2dc:	681b      	ldr	r3, [r3, #0]
 2de:	b29b      	uxth	r3, r3
 2e0:	4a07      	ldr	r2, [pc, #28]	; (300 <system_clock_source_enable+0xa0>)
 2e2:	8493      	strh	r3, [r2, #36]	; 0x24
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
 2e4:	2000      	movs	r0, #0
 2e6:	e008      	b.n	2fa <system_clock_source_enable+0x9a>
		_system_clock_source_dfll_set_config_errata_9905();
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
 2e8:	4905      	ldr	r1, [pc, #20]	; (300 <system_clock_source_enable+0xa0>)
 2ea:	2244      	movs	r2, #68	; 0x44
 2ec:	5c88      	ldrb	r0, [r1, r2]
 2ee:	2302      	movs	r3, #2
 2f0:	4303      	orrs	r3, r0
 2f2:	548b      	strb	r3, [r1, r2]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
 2f4:	2000      	movs	r0, #0
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
		break;
 2f6:	e000      	b.n	2fa <system_clock_source_enable+0x9a>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
 2f8:	2000      	movs	r0, #0
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
 2fa:	4770      	bx	lr
 2fc:	000006c0 	.word	0x000006c0
 300:	40000800 	.word	0x40000800
 304:	20000040 	.word	0x20000040

00000308 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
 308:	b530      	push	{r4, r5, lr}
 30a:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
 30c:	22c2      	movs	r2, #194	; 0xc2
 30e:	00d2      	lsls	r2, r2, #3
 310:	4b1a      	ldr	r3, [pc, #104]	; (37c <system_clock_init+0x74>)
 312:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
 314:	4a1a      	ldr	r2, [pc, #104]	; (380 <system_clock_init+0x78>)
 316:	6853      	ldr	r3, [r2, #4]
 318:	211e      	movs	r1, #30
 31a:	438b      	bics	r3, r1
 31c:	6053      	str	r3, [r2, #4]
{
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
 31e:	2301      	movs	r3, #1
 320:	466a      	mov	r2, sp
 322:	7013      	strb	r3, [r2, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
 324:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
 326:	4d17      	ldr	r5, [pc, #92]	; (384 <system_clock_init+0x7c>)
 328:	b2e0      	uxtb	r0, r4
 32a:	4669      	mov	r1, sp
 32c:	47a8      	blx	r5
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
 32e:	3401      	adds	r4, #1
 330:	2c25      	cmp	r4, #37	; 0x25
 332:	d1f9      	bne.n	328 <system_clock_init+0x20>
		struct system_clock_source_osc8m_config *const config)
{
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
	config->run_in_standby  = false;
 334:	a803      	add	r0, sp, #12
 336:	2400      	movs	r4, #0
 338:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
 33a:	2501      	movs	r5, #1
 33c:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
 33e:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
 340:	4b11      	ldr	r3, [pc, #68]	; (388 <system_clock_init+0x80>)
 342:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
 344:	2006      	movs	r0, #6
 346:	4b11      	ldr	r3, [pc, #68]	; (38c <system_clock_init+0x84>)
 348:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
 34a:	4b11      	ldr	r3, [pc, #68]	; (390 <system_clock_init+0x88>)
 34c:	4798      	blx	r3
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
 34e:	4b11      	ldr	r3, [pc, #68]	; (394 <system_clock_init+0x8c>)
 350:	721c      	strb	r4, [r3, #8]
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
 352:	725c      	strb	r4, [r3, #9]
			break;
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
 354:	729c      	strb	r4, [r3, #10]
			break;
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
 356:	72dc      	strb	r4, [r3, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
 358:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
 35a:	466b      	mov	r3, sp
 35c:	705c      	strb	r4, [r3, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
 35e:	2306      	movs	r3, #6
 360:	466a      	mov	r2, sp
 362:	7013      	strb	r3, [r2, #0]
#endif
	config->run_in_standby     = false;
 364:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
 366:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
 368:	4669      	mov	r1, sp
 36a:	2000      	movs	r0, #0
 36c:	4b0a      	ldr	r3, [pc, #40]	; (398 <system_clock_init+0x90>)
 36e:	4798      	blx	r3
 370:	2000      	movs	r0, #0
 372:	4b0a      	ldr	r3, [pc, #40]	; (39c <system_clock_init+0x94>)
 374:	4798      	blx	r3
#endif
}
 376:	b005      	add	sp, #20
 378:	bd30      	pop	{r4, r5, pc}
 37a:	46c0      	nop			; (mov r8, r8)
 37c:	40000800 	.word	0x40000800
 380:	41004000 	.word	0x41004000
 384:	0000051d 	.word	0x0000051d
 388:	00000225 	.word	0x00000225
 38c:	00000261 	.word	0x00000261
 390:	000003a1 	.word	0x000003a1
 394:	40000400 	.word	0x40000400
 398:	000003c5 	.word	0x000003c5
 39c:	0000047d 	.word	0x0000047d

000003a0 <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
 3a0:	4a06      	ldr	r2, [pc, #24]	; (3bc <system_gclk_init+0x1c>)
 3a2:	6991      	ldr	r1, [r2, #24]
 3a4:	2308      	movs	r3, #8
 3a6:	430b      	orrs	r3, r1
 3a8:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
 3aa:	2201      	movs	r2, #1
 3ac:	4b04      	ldr	r3, [pc, #16]	; (3c0 <system_gclk_init+0x20>)
 3ae:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
 3b0:	0019      	movs	r1, r3
 3b2:	780b      	ldrb	r3, [r1, #0]
 3b4:	4213      	tst	r3, r2
 3b6:	d1fc      	bne.n	3b2 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
 3b8:	4770      	bx	lr
 3ba:	46c0      	nop			; (mov r8, r8)
 3bc:	40000400 	.word	0x40000400
 3c0:	40000c00 	.word	0x40000c00

000003c4 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
 3c4:	b570      	push	{r4, r5, r6, lr}
 3c6:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
 3c8:	0005      	movs	r5, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
 3ca:	780c      	ldrb	r4, [r1, #0]
 3cc:	0224      	lsls	r4, r4, #8
 3ce:	4304      	orrs	r4, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
 3d0:	784b      	ldrb	r3, [r1, #1]
 3d2:	2b00      	cmp	r3, #0
 3d4:	d002      	beq.n	3dc <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
 3d6:	2380      	movs	r3, #128	; 0x80
 3d8:	02db      	lsls	r3, r3, #11
 3da:	431c      	orrs	r4, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
 3dc:	7a4b      	ldrb	r3, [r1, #9]
 3de:	2b00      	cmp	r3, #0
 3e0:	d002      	beq.n	3e8 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
 3e2:	2380      	movs	r3, #128	; 0x80
 3e4:	031b      	lsls	r3, r3, #12
 3e6:	431c      	orrs	r4, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
 3e8:	6848      	ldr	r0, [r1, #4]
 3ea:	2801      	cmp	r0, #1
 3ec:	d918      	bls.n	420 <system_gclk_gen_set_config+0x5c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
 3ee:	1e43      	subs	r3, r0, #1
 3f0:	4218      	tst	r0, r3
 3f2:	d110      	bne.n	416 <system_gclk_gen_set_config+0x52>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
 3f4:	2802      	cmp	r0, #2
 3f6:	d906      	bls.n	406 <system_gclk_gen_set_config+0x42>
 3f8:	2302      	movs	r3, #2
 3fa:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
 3fc:	3201      	adds	r2, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
 3fe:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
 400:	4298      	cmp	r0, r3
 402:	d8fb      	bhi.n	3fc <system_gclk_gen_set_config+0x38>
 404:	e000      	b.n	408 <system_gclk_gen_set_config+0x44>
 406:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
 408:	0212      	lsls	r2, r2, #8
 40a:	4332      	orrs	r2, r6
 40c:	0015      	movs	r5, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
 40e:	2380      	movs	r3, #128	; 0x80
 410:	035b      	lsls	r3, r3, #13
 412:	431c      	orrs	r4, r3
 414:	e004      	b.n	420 <system_gclk_gen_set_config+0x5c>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
 416:	0205      	lsls	r5, r0, #8
 418:	4335      	orrs	r5, r6
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
 41a:	2380      	movs	r3, #128	; 0x80
 41c:	029b      	lsls	r3, r3, #10
 41e:	431c      	orrs	r4, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
 420:	7a0b      	ldrb	r3, [r1, #8]
 422:	2b00      	cmp	r3, #0
 424:	d002      	beq.n	42c <system_gclk_gen_set_config+0x68>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
 426:	2380      	movs	r3, #128	; 0x80
 428:	039b      	lsls	r3, r3, #14
 42a:	431c      	orrs	r4, r3
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 42c:	4a0f      	ldr	r2, [pc, #60]	; (46c <system_gclk_gen_set_config+0xa8>)
 42e:	7853      	ldrb	r3, [r2, #1]
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing()) {
 430:	b25b      	sxtb	r3, r3
 432:	2b00      	cmp	r3, #0
 434:	dbfb      	blt.n	42e <system_gclk_gen_set_config+0x6a>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
 436:	4b0e      	ldr	r3, [pc, #56]	; (470 <system_gclk_gen_set_config+0xac>)
 438:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
 43a:	4b0e      	ldr	r3, [pc, #56]	; (474 <system_gclk_gen_set_config+0xb0>)
 43c:	701e      	strb	r6, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 43e:	4a0b      	ldr	r2, [pc, #44]	; (46c <system_gclk_gen_set_config+0xa8>)
 440:	7853      	ldrb	r3, [r2, #1]

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
 442:	b25b      	sxtb	r3, r3
 444:	2b00      	cmp	r3, #0
 446:	dbfb      	blt.n	440 <system_gclk_gen_set_config+0x7c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
 448:	4b08      	ldr	r3, [pc, #32]	; (46c <system_gclk_gen_set_config+0xa8>)
 44a:	609d      	str	r5, [r3, #8]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 44c:	001a      	movs	r2, r3
 44e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;

	while (system_gclk_is_syncing()) {
 450:	b25b      	sxtb	r3, r3
 452:	2b00      	cmp	r3, #0
 454:	dbfb      	blt.n	44e <system_gclk_gen_set_config+0x8a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
 456:	4a05      	ldr	r2, [pc, #20]	; (46c <system_gclk_gen_set_config+0xa8>)
 458:	6851      	ldr	r1, [r2, #4]
 45a:	2380      	movs	r3, #128	; 0x80
 45c:	025b      	lsls	r3, r3, #9
 45e:	400b      	ands	r3, r1
 460:	431c      	orrs	r4, r3
 462:	6054      	str	r4, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
 464:	4b04      	ldr	r3, [pc, #16]	; (478 <system_gclk_gen_set_config+0xb4>)
 466:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
 468:	bd70      	pop	{r4, r5, r6, pc}
 46a:	46c0      	nop			; (mov r8, r8)
 46c:	40000c00 	.word	0x40000c00
 470:	000001b5 	.word	0x000001b5
 474:	40000c08 	.word	0x40000c08
 478:	000001f5 	.word	0x000001f5

0000047c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
 47c:	b510      	push	{r4, lr}
 47e:	0004      	movs	r4, r0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 480:	4a0b      	ldr	r2, [pc, #44]	; (4b0 <system_gclk_gen_enable+0x34>)
 482:	7853      	ldrb	r3, [r2, #1]
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
 484:	b25b      	sxtb	r3, r3
 486:	2b00      	cmp	r3, #0
 488:	dbfb      	blt.n	482 <system_gclk_gen_enable+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
 48a:	4b0a      	ldr	r3, [pc, #40]	; (4b4 <system_gclk_gen_enable+0x38>)
 48c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
 48e:	4b0a      	ldr	r3, [pc, #40]	; (4b8 <system_gclk_gen_enable+0x3c>)
 490:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 492:	4a07      	ldr	r2, [pc, #28]	; (4b0 <system_gclk_gen_enable+0x34>)
 494:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
 496:	b25b      	sxtb	r3, r3
 498:	2b00      	cmp	r3, #0
 49a:	dbfb      	blt.n	494 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
 49c:	4a04      	ldr	r2, [pc, #16]	; (4b0 <system_gclk_gen_enable+0x34>)
 49e:	6853      	ldr	r3, [r2, #4]
 4a0:	2180      	movs	r1, #128	; 0x80
 4a2:	0249      	lsls	r1, r1, #9
 4a4:	430b      	orrs	r3, r1
 4a6:	6053      	str	r3, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
 4a8:	4b04      	ldr	r3, [pc, #16]	; (4bc <system_gclk_gen_enable+0x40>)
 4aa:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
 4ac:	bd10      	pop	{r4, pc}
 4ae:	46c0      	nop			; (mov r8, r8)
 4b0:	40000c00 	.word	0x40000c00
 4b4:	000001b5 	.word	0x000001b5
 4b8:	40000c04 	.word	0x40000c04
 4bc:	000001f5 	.word	0x000001f5

000004c0 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
 4c0:	b510      	push	{r4, lr}
 4c2:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
 4c4:	4b0f      	ldr	r3, [pc, #60]	; (504 <system_gclk_chan_disable+0x44>)
 4c6:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
 4c8:	4b0f      	ldr	r3, [pc, #60]	; (508 <system_gclk_chan_disable+0x48>)
 4ca:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
 4cc:	4b0f      	ldr	r3, [pc, #60]	; (50c <system_gclk_chan_disable+0x4c>)
 4ce:	885a      	ldrh	r2, [r3, #2]
 4d0:	0512      	lsls	r2, r2, #20
 4d2:	0f10      	lsrs	r0, r2, #28
	GCLK->CLKCTRL.bit.GEN = 0;
 4d4:	8859      	ldrh	r1, [r3, #2]
 4d6:	4a0e      	ldr	r2, [pc, #56]	; (510 <system_gclk_chan_disable+0x50>)
 4d8:	400a      	ands	r2, r1
 4da:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
 4dc:	8859      	ldrh	r1, [r3, #2]
 4de:	4a0d      	ldr	r2, [pc, #52]	; (514 <system_gclk_chan_disable+0x54>)
 4e0:	400a      	ands	r2, r1
 4e2:	805a      	strh	r2, [r3, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
 4e4:	0019      	movs	r1, r3
 4e6:	2280      	movs	r2, #128	; 0x80
 4e8:	01d2      	lsls	r2, r2, #7
 4ea:	884b      	ldrh	r3, [r1, #2]
 4ec:	4213      	tst	r3, r2
 4ee:	d1fc      	bne.n	4ea <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
 4f0:	4906      	ldr	r1, [pc, #24]	; (50c <system_gclk_chan_disable+0x4c>)
 4f2:	884c      	ldrh	r4, [r1, #2]
 4f4:	0202      	lsls	r2, r0, #8
 4f6:	4b06      	ldr	r3, [pc, #24]	; (510 <system_gclk_chan_disable+0x50>)
 4f8:	4023      	ands	r3, r4
 4fa:	4313      	orrs	r3, r2
 4fc:	804b      	strh	r3, [r1, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
 4fe:	4b06      	ldr	r3, [pc, #24]	; (518 <system_gclk_chan_disable+0x58>)
 500:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
 502:	bd10      	pop	{r4, pc}
 504:	000001b5 	.word	0x000001b5
 508:	40000c02 	.word	0x40000c02
 50c:	40000c00 	.word	0x40000c00
 510:	fffff0ff 	.word	0xfffff0ff
 514:	ffffbfff 	.word	0xffffbfff
 518:	000001f5 	.word	0x000001f5

0000051c <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
 51c:	b510      	push	{r4, lr}

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
 51e:	780c      	ldrb	r4, [r1, #0]
 520:	0224      	lsls	r4, r4, #8
 522:	4304      	orrs	r4, r0

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
 524:	4b02      	ldr	r3, [pc, #8]	; (530 <system_gclk_chan_set_config+0x14>)
 526:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
 528:	b2a4      	uxth	r4, r4
 52a:	4b02      	ldr	r3, [pc, #8]	; (534 <system_gclk_chan_set_config+0x18>)
 52c:	805c      	strh	r4, [r3, #2]
}
 52e:	bd10      	pop	{r4, pc}
 530:	000004c1 	.word	0x000004c1
 534:	40000c00 	.word	0x40000c00

00000538 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
 538:	4770      	bx	lr
 53a:	46c0      	nop			; (mov r8, r8)

0000053c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
 53c:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
 53e:	4b05      	ldr	r3, [pc, #20]	; (554 <system_init+0x18>)
 540:	4798      	blx	r3
	
	/* Initialize board hardware */
	system_board_init();
 542:	4b05      	ldr	r3, [pc, #20]	; (558 <system_init+0x1c>)
 544:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
 546:	4b05      	ldr	r3, [pc, #20]	; (55c <system_init+0x20>)
 548:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
 54a:	4b05      	ldr	r3, [pc, #20]	; (560 <system_init+0x24>)
 54c:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
 54e:	4b05      	ldr	r3, [pc, #20]	; (564 <system_init+0x28>)
 550:	4798      	blx	r3
}
 552:	bd10      	pop	{r4, pc}
 554:	00000309 	.word	0x00000309
 558:	000001b1 	.word	0x000001b1
 55c:	00000539 	.word	0x00000539
 560:	00000539 	.word	0x00000539
 564:	00000539 	.word	0x00000539

00000568 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
 568:	e7fe      	b.n	568 <Dummy_Handler>
 56a:	46c0      	nop			; (mov r8, r8)

0000056c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
 56c:	b570      	push	{r4, r5, r6, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
 56e:	4b2e      	ldr	r3, [pc, #184]	; (628 <Reset_Handler+0xbc>)
 570:	4a2e      	ldr	r2, [pc, #184]	; (62c <Reset_Handler+0xc0>)
 572:	429a      	cmp	r2, r3
 574:	d003      	beq.n	57e <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
 576:	4b2e      	ldr	r3, [pc, #184]	; (630 <Reset_Handler+0xc4>)
 578:	4a2b      	ldr	r2, [pc, #172]	; (628 <Reset_Handler+0xbc>)
 57a:	429a      	cmp	r2, r3
 57c:	d304      	bcc.n	588 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
 57e:	4b2d      	ldr	r3, [pc, #180]	; (634 <Reset_Handler+0xc8>)
 580:	4a2d      	ldr	r2, [pc, #180]	; (638 <Reset_Handler+0xcc>)
 582:	429a      	cmp	r2, r3
 584:	d310      	bcc.n	5a8 <Reset_Handler+0x3c>
 586:	e01e      	b.n	5c6 <Reset_Handler+0x5a>
 588:	4a2c      	ldr	r2, [pc, #176]	; (63c <Reset_Handler+0xd0>)
 58a:	4b29      	ldr	r3, [pc, #164]	; (630 <Reset_Handler+0xc4>)
 58c:	3303      	adds	r3, #3
 58e:	1a9b      	subs	r3, r3, r2
 590:	089b      	lsrs	r3, r3, #2
 592:	3301      	adds	r3, #1
 594:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
 596:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
 598:	4823      	ldr	r0, [pc, #140]	; (628 <Reset_Handler+0xbc>)
 59a:	4924      	ldr	r1, [pc, #144]	; (62c <Reset_Handler+0xc0>)
 59c:	588c      	ldr	r4, [r1, r2]
 59e:	5084      	str	r4, [r0, r2]
 5a0:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
 5a2:	429a      	cmp	r2, r3
 5a4:	d1fa      	bne.n	59c <Reset_Handler+0x30>
 5a6:	e7ea      	b.n	57e <Reset_Handler+0x12>
 5a8:	4a25      	ldr	r2, [pc, #148]	; (640 <Reset_Handler+0xd4>)
 5aa:	4b22      	ldr	r3, [pc, #136]	; (634 <Reset_Handler+0xc8>)
 5ac:	3303      	adds	r3, #3
 5ae:	1a9b      	subs	r3, r3, r2
 5b0:	089b      	lsrs	r3, r3, #2
 5b2:	3301      	adds	r3, #1
 5b4:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
 5b6:	2200      	movs	r2, #0
                *pDest++ = 0;
 5b8:	481f      	ldr	r0, [pc, #124]	; (638 <Reset_Handler+0xcc>)
 5ba:	2100      	movs	r1, #0
 5bc:	1814      	adds	r4, r2, r0
 5be:	6021      	str	r1, [r4, #0]
 5c0:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
 5c2:	429a      	cmp	r2, r3
 5c4:	d1fa      	bne.n	5bc <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
 5c6:	4a1f      	ldr	r2, [pc, #124]	; (644 <Reset_Handler+0xd8>)
 5c8:	21ff      	movs	r1, #255	; 0xff
 5ca:	4b1f      	ldr	r3, [pc, #124]	; (648 <Reset_Handler+0xdc>)
 5cc:	438b      	bics	r3, r1
 5ce:	6093      	str	r3, [r2, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
 5d0:	39fd      	subs	r1, #253	; 0xfd
 5d2:	2390      	movs	r3, #144	; 0x90
 5d4:	005b      	lsls	r3, r3, #1
 5d6:	4a1d      	ldr	r2, [pc, #116]	; (64c <Reset_Handler+0xe0>)
 5d8:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
 5da:	481d      	ldr	r0, [pc, #116]	; (650 <Reset_Handler+0xe4>)
 5dc:	78c3      	ldrb	r3, [r0, #3]
 5de:	2403      	movs	r4, #3
 5e0:	43a3      	bics	r3, r4
 5e2:	2202      	movs	r2, #2
 5e4:	4313      	orrs	r3, r2
 5e6:	70c3      	strb	r3, [r0, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
 5e8:	78c3      	ldrb	r3, [r0, #3]
 5ea:	260c      	movs	r6, #12
 5ec:	43b3      	bics	r3, r6
 5ee:	2108      	movs	r1, #8
 5f0:	430b      	orrs	r3, r1
 5f2:	70c3      	strb	r3, [r0, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
 5f4:	4b17      	ldr	r3, [pc, #92]	; (654 <Reset_Handler+0xe8>)
 5f6:	7b98      	ldrb	r0, [r3, #14]
 5f8:	2530      	movs	r5, #48	; 0x30
 5fa:	43a8      	bics	r0, r5
 5fc:	0005      	movs	r5, r0
 5fe:	2020      	movs	r0, #32
 600:	4328      	orrs	r0, r5
 602:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
 604:	7b98      	ldrb	r0, [r3, #14]
 606:	43b0      	bics	r0, r6
 608:	4301      	orrs	r1, r0
 60a:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
 60c:	7b99      	ldrb	r1, [r3, #14]
 60e:	43a1      	bics	r1, r4
 610:	430a      	orrs	r2, r1
 612:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
 614:	4a10      	ldr	r2, [pc, #64]	; (658 <Reset_Handler+0xec>)
 616:	6851      	ldr	r1, [r2, #4]
 618:	2380      	movs	r3, #128	; 0x80
 61a:	430b      	orrs	r3, r1
 61c:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
 61e:	4b0f      	ldr	r3, [pc, #60]	; (65c <Reset_Handler+0xf0>)
 620:	4798      	blx	r3

        /* Branch to main function */
        main();
 622:	4b0f      	ldr	r3, [pc, #60]	; (660 <Reset_Handler+0xf4>)
 624:	4798      	blx	r3
 626:	e7fe      	b.n	626 <Reset_Handler+0xba>
 628:	20000000 	.word	0x20000000
 62c:	00000704 	.word	0x00000704
 630:	20000004 	.word	0x20000004
 634:	2000005c 	.word	0x2000005c
 638:	20000004 	.word	0x20000004
 63c:	20000004 	.word	0x20000004
 640:	20000008 	.word	0x20000008
 644:	e000ed00 	.word	0xe000ed00
 648:	00000000 	.word	0x00000000
 64c:	41007000 	.word	0x41007000
 650:	41005000 	.word	0x41005000
 654:	41004800 	.word	0x41004800
 658:	41004000 	.word	0x41004000
 65c:	00000675 	.word	0x00000675
 660:	00000665 	.word	0x00000665

00000664 <main>:
struct usart_module cdc_uart_module;



int main(void)
{
 664:	b510      	push	{r4, lr}
	
	system_init();
 666:	4b02      	ldr	r3, [pc, #8]	; (670 <main+0xc>)
 668:	4798      	blx	r3
	
	
	return true;
}
 66a:	2001      	movs	r0, #1
 66c:	bd10      	pop	{r4, pc}
 66e:	46c0      	nop			; (mov r8, r8)
 670:	0000053d 	.word	0x0000053d

00000674 <__libc_init_array>:
 674:	4b0e      	ldr	r3, [pc, #56]	; (6b0 <__libc_init_array+0x3c>)
 676:	b570      	push	{r4, r5, r6, lr}
 678:	2500      	movs	r5, #0
 67a:	001e      	movs	r6, r3
 67c:	4c0d      	ldr	r4, [pc, #52]	; (6b4 <__libc_init_array+0x40>)
 67e:	1ae4      	subs	r4, r4, r3
 680:	10a4      	asrs	r4, r4, #2
 682:	42a5      	cmp	r5, r4
 684:	d004      	beq.n	690 <__libc_init_array+0x1c>
 686:	00ab      	lsls	r3, r5, #2
 688:	58f3      	ldr	r3, [r6, r3]
 68a:	4798      	blx	r3
 68c:	3501      	adds	r5, #1
 68e:	e7f8      	b.n	682 <__libc_init_array+0xe>
 690:	f000 f828 	bl	6e4 <_init>
 694:	4b08      	ldr	r3, [pc, #32]	; (6b8 <__libc_init_array+0x44>)
 696:	2500      	movs	r5, #0
 698:	001e      	movs	r6, r3
 69a:	4c08      	ldr	r4, [pc, #32]	; (6bc <__libc_init_array+0x48>)
 69c:	1ae4      	subs	r4, r4, r3
 69e:	10a4      	asrs	r4, r4, #2
 6a0:	42a5      	cmp	r5, r4
 6a2:	d004      	beq.n	6ae <__libc_init_array+0x3a>
 6a4:	00ab      	lsls	r3, r5, #2
 6a6:	58f3      	ldr	r3, [r6, r3]
 6a8:	4798      	blx	r3
 6aa:	3501      	adds	r5, #1
 6ac:	e7f8      	b.n	6a0 <__libc_init_array+0x2c>
 6ae:	bd70      	pop	{r4, r5, r6, pc}
 6b0:	000006f0 	.word	0x000006f0
 6b4:	000006f0 	.word	0x000006f0
 6b8:	000006f0 	.word	0x000006f0
 6bc:	000006f4 	.word	0x000006f4
 6c0:	0000028c 	.word	0x0000028c
 6c4:	0000026c 	.word	0x0000026c
 6c8:	0000026c 	.word	0x0000026c
 6cc:	000002f8 	.word	0x000002f8
 6d0:	0000027e 	.word	0x0000027e
 6d4:	0000029a 	.word	0x0000029a
 6d8:	00000270 	.word	0x00000270
 6dc:	000002a8 	.word	0x000002a8
 6e0:	000002e8 	.word	0x000002e8

000006e4 <_init>:
 6e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 6e6:	46c0      	nop			; (mov r8, r8)
 6e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 6ea:	bc08      	pop	{r3}
 6ec:	469e      	mov	lr, r3
 6ee:	4770      	bx	lr

000006f0 <__init_array_start>:
 6f0:	000000dd 	.word	0x000000dd

000006f4 <_fini>:
 6f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 6f6:	46c0      	nop			; (mov r8, r8)
 6f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 6fa:	bc08      	pop	{r3}
 6fc:	469e      	mov	lr, r3
 6fe:	4770      	bx	lr

00000700 <__fini_array_start>:
 700:	000000b5 	.word	0x000000b5
